[
    {
        "title": "How hard is machine learning?",
        "comments": "[98] The machine earning algorithms are already implemented,  so you won't be making your own. Checkout tensorflow, pytorch, opencv etc.\n\nThe difficulty is the data. Knowing which algorithm or ensemble of algorithms is going to work best with your data and also engineering your dataset to work better. Knowledge of statistics is definitely useful. You'll probably spend most of your time preparing your dataset and then the rest of it trying to not overfit to your training set.\n\nI'm by no means an expert though. I took some AI classes while doing my masters to see if I would like it or not. I didn't LOL. Learning the math behind the algorithms was cool, but actually using it was boring as hell to me cuz you spend 98% of the time messing with your dataset.\n  [4] Some projects work just fine using prepackaged algos as a black box. Other projects require much more, where you will need to understand the math and CS to either roll your own, or make modifications.\n\nLike everything else, there's levels. It depends what you do.\n  [3] Amen to that.\n[65] Learning on your on I figure it\u2019s quite hard. I took an intro to AI in college and while it was fun I saw how hard that field really is; and that was just an intro :\u2019)\n  [32] Intro to AI courses are generally very broad and cover way more than just machine learning.\n\nYou learn a lot of 'classical' AI techniques (semantic nets, informed and uninformed search, adversarial search, Bayes nets) and likely some ML topics (classification and regression, clustering, maybe MDPs and neural nets) at a high level. Depending on how deep it goes, there may also be an 'applications'/'domains' unit (game AI, NLP, computer vision, robotics).\n  [11] I agree that it's really hard.\n\nIn the uni, I took a choice cours about AI, and guess what, I dropped it because it was really hard and not for me.\n  [3] Yes I took an AI course and completely failed the Machine Learning section which was only the tail end of the semester luckily did well enough on the other portions  .\n[21] It can be as easy as calling a library function, as difficult as mathematics research, and everything in between. \n\n(Someone who has spent time every week this year trying to refine the accuracy of an ML model by identifying more data to add)\n[15] Well, it is mathematically heavy, SVM, PCA, gradient descent. All that requires a solid foundation in linear algebra and calculus.\n\nOn the other hand you can just use scikit learn, load your data into pandas, and feed it to a random forest. Hell, you can even use auto scikit learn. For that you simply need some ML overview knowledge and some SW dev skills.\n[12] When you go deep into machine learning, you'll realize that so much math is required to be a veteran ml engineer\n  [1] are you saying us folks who suck at math should give up? \ud83e\udd72\n[9] Depends, on how much of the work you're doing. But thankfully a lot of the heavy lifting has been done the math is definitely important to know but if you're just playing around I'm sure you could get this project done by watching YouTube videos. there are premade models you can just train on your own data to achieve this as well. \n\nNow working in the field professionally is much harder you need to have a deep understanding of several disciplines. You essentially need a Ms + experience in the field or related field such as swe.\n\nGood luck!\n[9] i look machine learning in undergrad and the only thing i learned is that i don\u2019t like machine learning. \n\nit\u2019s the hardest thing ive ever done\n[9] Depends on your mathematical understanding of abstract concepts. If you\u2019re not good at math, you\u2019ll have to work extra hard, but that\u2019s definitely ok! You just gotta have the drive to learn it.\n[7] Machine learning libraries generally do a pretty good job of hiding the complexity of their internals. You can easily pick up a library by referring to its documentation or its API if you have sufficient domain knowledge (usually statistical inference) to understand *what* you want to do. You do need to pick up which algorithms are useful under which conditions, but you can still use them as a black box in many use cases.\n\nLearning the internals of machine learning is a completely different story. It involves everything from statistics and probability (that you would probably need to understand to some level anyway, even to use ML libraries as black boxes) to information theory to matrix calculus - something [this paper](https://arxiv.org/abs/1802.01528) calls a shotgun wedding of linear algebra and multivariable calculus. [This book by GBC](https://www.deeplearningbook.org/) may give you a good idea about what the internals of machine learning algorithms entail. If you're serious about this stuff, you should have a firm grasp on how the internals work, but not merely in a 'high-level' sense; you should understand the theory of it as well.\n\nBoth of these can be fun stuff to learn, but you need to give yourself some time.\n\nIf you prefer hands-on learning, maybe start with something simple, such as [this book](https://www.oreilly.com/library/view/deep-learning-from/9781492041405/), which only assumes some intermediate Python knowledge, and has you implement deep learning algorithms by hand. This will help you understand a lot of what [the GBC book](https://www.deeplearningbook.org/) lays out in mathematical terms in its earlier chapters. You can follow up an understanding of the basics with learning a library like PyTorch or TensorFlow using your favourite resources.\n[6] Implementing machine learning isn\u2019t hard. Implementing useful machine learning is extremely hard. \n\n\nUnless things have drastically changed since I took a ML intro course in uni, machine learning at its core is training data, ML code, test data. Seems pretty straightforward. The complication comes in when you look closer at the data and defining your ML algorithm. It takes a lot of data to be able to get a ML algorithm to distinguish between a tank and a baked potato. The first challenge is even acquiring the data, there is a reason why people\u2019s data are such a valued commodity in tech companies. Because it takes a ton of data to train useful AI. Now let\u2019s say you have all the data you need, if you are looking for a specific classification of vehicle for your use case, you now need to classify all your training data before your app can learn from it. Including examples of not a tank. (This is what you\u2019re doing for companies when you do \u201cclick all squares with a stoplight\u201d captchas)\n\n\nLet\u2019s say all of this is taken care of, it\u2019s still a crapshoot on if your ML algorithm can actually distinguish between a tank and a potato and the math required to open the black box that is a neural network and distinguish which nodes need tweaking or how each sample impacts the weight of each node through each iteration and their interactions with other nodes is exhausting. \n\n\nBasically it\u2019s easy to set up tensorflow and shoot data at it\u2026it\u2019s really really hard to get that tensorflow you shot data at to provide something actually useful.\n[6] If you understand code well and have mathematics background for basic mathematics statistics and calculus 1&2, linear algebra, then ml isent so hard to self learn. But you'll still need to learn some higher level math concepts in theory but u can understand it with above math background even if u can't solve the partial derivatives diff equations etc. you can understand what those parts of the code are doing. Ml is just fancy logistical regression models mostly statistics but has higher order math for deriving other needed variables. However these algorithms can be. Copy pasted and u won't need to likely implement ur own while learning. Ml gets much harder when u get past the simple logistics regression models and move onto neural nets and deep learning where lack of math will prevent u from going further.\n  [2] Yes.\n[5] If you already know python, then you should be able to implement the code to run an existing model fairly easily.\n\nYou have resources like https://huggingface.co/ for this\n[3] If you mean properly doing ML, then you better have a degree in statistics.\n\nOtherwise, if you are just using prebuilt models, then it is just a matter of understanding basic concepts and use the API.\n[3] I recommend you try the Stanford Online course on Coursera. \n\nI'm a university student in Computer science and I did the specialization on the side and when I went to take the course from my university, it was super easy cause I already knew how everything works except some of the hard maths.\n\nIf you want to practice, you can also look at Kaggle (it's a website for ML competition but a lot of them or for practice).\n[4] hi, applying machine learning is surprisingly accessible nowadays. If you have no experience whatsoever, take a look at https://roboflow.com which guides you through the process of labeling and training a model. OpenCV has a lot of examples as well. hugging face also has some open source vision models that you may try.\n\nHaving said that, machine learning is hard. but to implement what you want, you don't need to understand much, there are a bunch out-of-the-box solutions you may use. good luck!\n[2] Building models is incredibly easy. To learn how, go to Kaggle and take their courses. The hard part is dealing with the dataset.\n[2] It depends. How's the level of your stats and math? If good, then you should be fine to self learn the most basic ML algorithms and implement them on your own. To get a basic understanding of how the models are trained.\n\nThen, watch some fun YouTube videos for more advanced models. No need to learn much math for those models. Just learn their basics.\n\n\nThen, you should be able to just find the codes of all these models in github/kaggle/etc. Modify them a little bit, run some of the famous ones. Get some reliable accuracy. Then you can just use it.\n[2] For most projects the most difficult part is getting labeled data.  Imagine you want to identify different types of vehicles.  You'll need a database full of pictures of vehicles with identification manually done for each picture.  If it's a Tesla the picture has the word 'Tesla' tied to it in the database.  This word is the label.\n\nMachine learning is mostly 'monkey see monkey do'.  So the better your labels are, and the more labels you have, the better the machine learning will be at labeling new pictures coming in.\n\nMachine learning is automating data entry.  But it starts with manual data entry, hiring labelers usually, then once you've got enough labels not needing to use humans any more.\n\nIf you want to experiment with using machine learning algorithms, there are tons of datasets out there you can use today.  No need to hire a team of people to make a dataset for you to get started.\n[1] Depends on who you are imo. When I was working with tensorflow, every concept they introduced had a pages going over every term mentioned. It's the same with engines. I don't care that I lose cool tools that will make my life easier as much as having code where I only understand a fraction of what's going on. I'll use it if I can implement it. However, it's a very unproductive mindset, tho.\n\nIf that's you, go with numpy or some other efficient way of doing matrix operations and try to learn slowly and be okay with doing a lot of work for little reward. \nIf not, scikit-learn & tensorflow are fine for most use cases and most likely more efficient than a self implemented one.\n[1] i think this one is so underrated it is an exellent course that gives you the contact of people that are working at big tech companies so you grow your network and knowledge  \n\n\n\n[https://www.udemy.com/course/machinelearning-datascience-course/?referralCode=177AE5EBD0CF8D8D60DF](https://www.udemy.com/course/machinelearning-datascience-course/?referralCode=177AE5EBD0CF8D8D60DF)\n[1] Hey. There is no such thing as whether ML is hard or easy. It's more about Whether or not it interests you. As for me i find it interesting enough to immerse myself into day in and day out. \n\nAnyway, as for your use case. It would be a problem of supervised machine learning. And there are plenty of pretrained models available for an image classification task. You can simply take a vehicle classification dataset or you can make one (this is the part where most of your time and energy will go into). And get a pretrained model from imagenet (resnet-150) and see how it performs on your dataset. You can get the implementation code in github Or chatgpt. \n\nIf you are okay with the performance of the model then good if not you need to finetune the modes on your dataset. This should be enough. \n\nAll of this might sound overwhelming. But it's not. Feel free to DM if you need help.\n[1] Suggest this app , day by day machine learning and mostly deep leaning : [ai academy : deep leaning (click here )](https://apps.apple.com/in/app/ai-academy-deep-learning/id6740095442)\n[1] It depends on the machine. Bender is pretty hard in general, so he\u2019d probably be a hard learner.\n[1] You aren't going to build your own ML model to detect vehicles, unless you have a ton of labelled data. It's not worth your time.  \n\n\nFor computer vision, OpenAI only has GPT4 Vision, which although very powerful, is too expensive and overkill for your use case. There are much cheaper API endpoints you can use.  Azure AI Vision Services for one...  object detection starts at $1 per 1,000 transactions.  \n\n\nYou can also just use an open source segnet of some kind.\n[1] You understand there\u2019s a lot of math behind it, right?\n[1] While the task you are proposing isn't necessarily too difficult depending on the availability of the data, you need to dedicate a lot of time in order to teach yourself Machine Learning. I'd say that the learning curve is way steeper than \"normal\" programming and the area is deeper than what one might think initially. \n\nIn order to succeed, I believe it's crucial that one has more than a single project in mind; you won't be motivated enough if there isn't a multitude of projects you want to build.\n[1] Depends if you want to know what you\u2019re doing and how the thing you\u2019re using actually works.\n\nThere intertubes are full of people plugging black boxes together with no idea how any of them work. Some get lucky. All can say they\u2019re *doing AI*.\n\nSo,\n\n * *Competent* - hard but personally rewarding and probably professionally\n * *Overconfident dilettante* - not only could you do it, your pets could\n\nWill employers be able to tell the difference? Some, eventually.\n\nSo ask yourself why you want to learn this, and that will tell you whether it\u2019s easy or hard.\n[1] It\u2019s not to difficult slap together a working prototype. \n\nThe task you described is a computer vision classification problem.\n\nIf training from scratch I would look for a dataset or create one that contains\u2026\n\ninputs = pictures of vehicles \n\nlabels = year make model\n\nWith year, make, model just query some api or database for the detailed description. Because the description is directly related to the year make and model you don\u2019t really need machine learning to do that part.\n\nI think it would be useful if the model could tell you the vehicle\u2019s condition. Like \u201cyo that truck is a rust bucket\u201d\n[1] If you currently know nothing about machine learning, then I would suggest not building your own models and using some existing APIs. Search for \"Google Vision API\" or \"Google Lens API\" or \"Azure Vision API\" or just any \"vision / object detection / boundary box detection API\" and try to build a little toy project around that at first. Google has some free API credits. AWS has some ready-made APIs for that, too, and they might have a free tier.\n\nBuilding your own models requires being good at 1) programming 2) maths/stats 3) specific domain of ML (Computer Vision in this case), and it takes a few years of practice to be good at this. However, it's totally possible to find some courses/tutorials that'll help you get started with simpler examples.\n\nI've been in the ML field for 10+ years by now, and if you ask me how long it'll take me to build a good model for what you wrote in the post - I'd probably say \"a year\" if I were to start from scratch (no infrastructure, no data to begin with), and it'll definitely cost some money in terms of labeling data and computers - I'd say, a few thousand of $$ at least.\n[1] If what you want is to solve a problem using machine learning, then it's pretty easy. There are lots of tools available that let you do classification (determine which thing each item is). If you have a bunch of data that's already labeled, in your case, a bunch of pictures of vehicles with accurate labels, then you can train it yourself. If not, there are [pre-trained models](https://pytorch.org/vision/stable/models.html) you can try. \n\nThese require some basic programming skills to potentially pre-process your images, but no real ML expertise. ML knowledge can certainly help guide your choices in a lot of ways, but someone with nothing but basic Python can at least get something running that might or might not work. It likely won't do exactly what you want, but it might be close enough to live with.\n\nLearning ML in the sense of learning how other people built and trained those models so that you could do a much more customized version yourself is quite challenging. Getting started with ML requires a fair amount of mathematical sophistication (particularly in statistics and linear algebra), and to get from \"getting started\" to understanding modern state of the art models is something that I'd expect to take a dedicated PhD student 6-12 months. There's just a lot to unpack in how things like ChatGPT work. You can read the papers, but each new breakthrough will basically be described as though you already knew how the last big breakthrough worked, and you won't.\n[1] For a simple startup application, I would go ahead and create a simple sequential model using tensorflow, relu activations, the adam optimizer, a couple dense layers, and two convolutional layers. The final output layer should be categorical with softmax activation for military farming and civilian. Then, fit the dataset from there.\nThis basically gives you a decent start in learning machine learning concepts to influence your own decisions.\nAlso you don't have to set up an environment. Just use Google colab for now\n[1] At university studying computer science it\u2019s pretty difficult. The maths is interesting and I\u2019m glad I have that understanding now. In the real world outside of uni it\u2019s much simpler for 99% if people, that remaining 1% of people being those working on the cutting edge building new AI/ML tools.\n[1] Check out the free courses from YouTube, the recorded sessions of MIT.\nThe teachers are so dedicated and the whole course is addictive, like a netflix show.\nAmini Alexander.\n[1] I would do [google's keras tutorial.](https://www.tensorflow.org/tutorials/keras/classification) You classify clothing items in it, similar to the problem you're trying to tackle. The code could likely be repurposed directly; then, your only difficulty will be collecting all the images of different vehicles you're trying to ID, which could be done by webscraping. \n\nContrary to what others here are saying, tensorflow and keras are not ML models themselves, they're libraries that make working with ML datasets easier.\n\nML is a highly varied field, with [different algorithms and networks](https://www.youtube.com/watch?v=u7obuspdQu4) for different applications. Image classification from a limited set of results is now considered a \"straightforward\" application. LLMs and autoencoders might be considered more \"complex\" applications.\n[1] Machine learning can be quite challenging to grasp at first. There are many complex algorithms and math concepts involved that take time and effort to fully understand. However, with patience and practice, anyone can learn the fundamentals of machine learning. The key is to start simple and work your way up to more advanced techniques. Don't get discouraged if you struggle at times, just take it one step at a time. Also, don't be afraid to ask for help. If you need assistance with a machine learning assignment or project, I highly recommend checking out call tutors. Based on my experience, they offer excellent machine-learning tutoring and assignment help at very reasonable prices. With the right support, you can master even the most difficult machine-learning concepts. The key is persistence and utilizing all available resources, like call tutors.\n[1] Writing it or training them?\n[1] The machines find it challenging but the more motivated ones do well\n[1] Low skill floor. You can spend en evening and learn how to do some image recognition.  \n\n\nHigh skill ceiling. Self driving cars.\n[1] At a deeper level than using frameworks and library\u2019s it\u2019s hard. Machine learning is essentially calculus based statistics applied through learning algorithms. \n\nIf you\u2019re interested in learning it at a deeper level I would look at the book \u201cAn Introduction to Statistical Learning with Applications in R\u201d. \n\nBut I would be sure you at least have a basic understanding of Calculus and college statistics before diving into that book.\n[1] a) very hard\n\nb) super hard\n\nc) crazy hard\n\nd) sorta hard\n\ne) hardly working\n[1] I\u2019m a programmer and I\u2019d like to know how things work at that level, so I got into that rabbit hole pretty deep. No one part of it is all that complicated. It\u2019s very clear to me now why the application of more programming power and better parallelization has really helped both model training and evaluation.  It was a fun trip. \n\nThe good news is that you don\u2019t need to deal with all that complication. We\u2019re past this stage where you need to do the equivalent of designing your own internal combustion engine, and you can just order one shipped to you in a crate from General Motors. \n\nBy which I mean, there\u2019s already a bunch of great tools out there that implement the machine, learning structure, and it\u2019s up to you to use that with your data sets.  there\u2019s still a ton of work to do there to make it work, but there\u2019s a whole bunch of stuff that I would classify as the guts of machine learning that you don\u2019t need to worry about at this point.  \n\nPretty much everything I wrote in terms of machine learning code, I have archived as an interesting exploration. There\u2019s no way I\u2019m going to make something myself that\u2019s as robust and optimized as the stuff I can get for free.  Hugging Face ftw.\n[1] I am really overwhelmed by the comments, and a lot of the feedback is positive. I think I have two options: OpenAI or maybe finding something similar in machine learning that I've been looking for (identifying vehicles). Hopefully, there are open-source alternatives available.\n"
    },
    {
        "title": "How I Started Learning Machine Learning",
        "comments": "[60] I tried everything for learning either they are too basic or too complicated but d2l.ai is best book i ever found\n  [17] d2l.ai the supreme book\ud83d\uded0\n  [11] Its too heavy on DL, majority of ML work isn't DL.\n  [2] Where can i find it. Do u have like an ebook u could share. Thanks\n  [1] I just quickly looked at the page and it seems excellent. When I study it in detail, I'll include the source in the post. Thank you.\n[10] How did you learn the math needed as a pre req?\n  [3] [math academy](https://mathacademy.com)\n  [3] I learned through that old Machine Learning course that was available on Coursera. I've also gone through their new course and it seems like you can master all the basics you need in it.\n  [2] Same question\n  [1] https://mml-book.github.io/\n[8] Pin this somehow since we get how to start questions every day\n  [5] Same conundrum.\n[8] Appreciate OP but would like to respectfully point out CS229 IS NOT a beginner course. If you don\u2019t have a strong mathematical background this course will cook you. The course is phenomenal but targets a very different audience than the Coursera offering. \n\nDon\u2019t pursue CS229 expecting to be taught the basics. Show up with a strong understanding of calculus 1-3, linear algebra and probability (there\u2019s some reference to mathematical statistics concepts but not required).\n  [2] For the math topics you mentioned what should I follow that covers most of the basics\n  [1] I agree with you. I included that course because it's freely available on YouTube, considering that the original Machine Learning course is no longer available.\n[6] Great post! I am a full stack web developer trying to stay relavant lol. Was researching this stuff exactly. Thank you so much.\n  [3] Thank you for support.\n[4] For the Stanford CS229 youtube course, I followed the syllabus link in the youtube comments. However, the pdf/exercises links don't seem to work e.g. \"Problem Set 0\" gives \"The requested URL /materials/ps0.pdf was not found on this server.\"\n  [2] I would recommend the Coursera course for beginners, the Machine Learning Specialization, if you're able to take it.\n[3] Bro this was literally what I wanted\u2026 i even made a post asking people. Thank you so much for sharing your journey. You inspired me\ud83d\udcaf\ud83d\udc9b\n  [2] Glad to hear that :)\n[3] Do you think it is still valuable to learn TensorFlow instead of PyTorch ?\n  [3] If I start today, I will go with PyTorch. But under the hood, both of them do a job. \n\nOne valuable thing in TensorFlow is Keras because it allows you to make straightforward models like RNN and LSTM relay fast.\n[3] Hardest thing for me is to come up with project ideas that will get some relevance for me in the job. I'm the beginner. I'm sort of afraid of being to ambitious and failing thus wasting time...\n[2] What do you think is the biggest thing you learned about ML from all this? How long did this all take?\n[2] Inviting you to r/Rag. People there will love this\n[2] Awesome\n  [1] Thanks\n[2] so this is your journey since 2016? amazing and thank you OP!\n  [1] It's not all a journey, but there are some basic points. There is a lot more.\n[2] Appreciate OP for the post!!! \n\nThank you.\n[2] Thank you for the post OP. Very resourceful.\n[2] Thanks for the great write up!!\n[2] Wow! This post is inspiring \ud83d\udcaa\n[2] Can elaborate on your note taking strategy? Like u said u filled two thick notebooks by hand.\n  [2] The strategy is quite simple. I wrote down the entire course, and when I first completed it, I simply went through it again and repeated everything.\n\nThis course was quite difficult for me and I struggled to understand everything the first time. I had a particularly hard time understanding derivatives in the backpropagation algorithm. But after going through it twice, it becomes easier.\n[2] The fear of overwhelming information and that I'll never try everything scares me out of ML and I'm kinda ashamed of myself\n[2] Thanks for sharing your journey!  Hope you don\u2019t mind if I follow you.\n  [1] Thank you for support and award \ud83d\ude42\n[2] Please NEVER delete this post.\n\nI will certainly look back and read it again in the future. So even if takes 20 years from now, and only a few people use Reddit, please don't ever delete this my good Sir/Maam.\n\nThank you so much!\n[2] Hi, just read your \"in-depth\" guide and really satisfied. \n\nBut I have a question. Most of guys in the comment said that the Stanford course from Andrew Ng requires a lot of maths. And can you make a recommendation for some good maths course ( calculus 1-3, linear algebra, statistics & prob) for just complete beginner (as just graduated from high school). \n\nThanks. Your post really helps and inspires me a lot\n  [1] Thank you \ud83d\ude42\n[2] Are you working somewhere?\n  [1] Yes, currently, I have a 9-5 job, and I'm trying to build something on the side and become an indie hacker.\n[2] Hey man, thank you for you post, it's really informative and inspiring. \n\nI downloaded your app and am checking it out. \n\nGreat job! On a first run through it looks nice and works well. \n\nI'm an engineer (web/backend) and was looking to build something very similar, also using cbt based chat & excercises, but in a different domain. \n\nCould you share some insight on how it works? \n\nAs I'm new to this, I thought something like Rasa framework would do it but that might be too lightweight / geared towards help desk type chat bot. \n\nI can't tell if the concepts are the same, train a model and use intents & stories to guide it. \n\nAppreciate any help you can share pointing me in the right direction.\n\n\nthank you.\n  [1] Thanks, I'll write a post soon about the technology I'm using and how everything works in the background.\n[2] just a quick question: is it necessary to implement all the algorithms involved when learning CS 229?\n  [1] I don't think it's necessary, but it's good to do.\n[2] Thanks for the post! Glad I am seeing this as a beginner. I do want to ask, since there are many open courses out there and so many textbooks, I feel its hard to find the right one for myself. They are either too easy or too difficult. I know Python, calculus, probability, & ODE, did train small RL driverless cars, but never took any classes systematically, just read papers and github tutorials whenever needed. Any suggestions for where to start for a systematic study? Or is there few textbooks that includes everything? Thanks!\n  [1] This is a very difficult question, but I think I answered it in the post itself about how to start.\n\nFrom my experience, I recommend starting immediately with a project. The best way to learn is through actual practice and work.\n[2] Do i need to learn math prior to taking the old course that you mentioned?\n  [2] In my opinion you don't need to, you can start the course right away\n[2] Thank you so much. You saved me from being distracted.\n[2] Wow there\u2019s so much to learn! I\u2019m gonna start with Andrew Ngs Specialization and see how it goes. Thanks for all these resources!\n[1] This is a pretty detailed post. Thank you. Can you please also write a separate post about reinforcement learning? I am planning to get into reinforcement learning at some point. So would love to know your journey.\n[1] Can you guide me on how to get started with NLP, step by step. Any recommendations on courses, projects, roadmap or resources would be greatly appreciated.  \nu/TechPrimo \n\n\n\nThanks\u00a0in\u00a0advance!\n[1] i want to study this\n[1] Hope I am able to beat step 1 of procrastination and starting but never reaching the finish line. Glad you were able to reach this impressive milestone\n"
    },
    {
        "title": "How hard is Machine Learning?",
        "comments": "[34] First, get it out of your head that you only have a year. Learning doesn\u2019t stop with college. I was a Test Engineer for three years before I managed to make the transition into ML. You have time, it doesn\u2019t need to be your first job out of school. It\u2019s a massive field with overlaps in statistics, algebra, data engineering, and software engineering. You won\u2019t get proficient in it in a year. \n\nGo pick up Hands on Machine Learning by Geron. Read through it all and follow along with the code examples. Learn how to clean data. Learn how to move data. Dive into the popular algorithms (Linear Regression, KNN, Dimensionality Reduction, SVMs, Decision Trees, etc). Learn how to use them. Why to use them. And have a general understanding of the math behind them.\n\nMost importantly, build your own ML project. I spend 9 months on one, putting in a few hours a week. DONT DO A CURATED ONE. Do your own. Understand the problem, get data from disparate sources, build a pipeline, transform the data, get results from a few algorithms, have clean code, and write tests. I walked my interviewer through my repo during my final interview and I filled almost the entire hour with it. I\u2019m pretty confident it\u2019s what landed me the job. It doesn\u2019t have to be something new or clever. It can be a fully solved problem. It just needs to demonstrate that you can take things from end-to-end\n\nYou have time. Slow, steady, and practical studying will get you there.\n[11] I mean think about it if your truly fascinated by it dosnt matter how hard it is because you will be dedicated to learning it, you could be the smartest person but if you hate learning it you wont be good\n[7] You could walk over to the library, pick up a practical machine learning textbook and read a few chapters. Or go to Google Scholar and read a few random papers in the field. If you won't even consider doing these then it's probably not for you, but if you do it and find they're not totally incomprehensible then maybe you can.\n[5] If it\u2019s your undergrad, you\u2019ll most likely have to do a Master\u2019s in Statistics, Math, Data Science, or Computer Science. \n\nIf you don\u2019t want to do a masters, you\u2019ll probably need to take electives for Data Mining, Machine Learning, Intro to AI, and a higher level statistics and math class. \n\nWith only an undergrad, you *might* get a new grad job in the role you want, but you\u2019ll most likely have to start in a Data Analytics/modeling, Data Science, or Software Engineering role and simply move up from there.\n  [0] Interesting, and yeah it is my undergrad, someone told me similar to you, but I am confused that if I get a SWE job, is it possible to continue learning ML and potentially pursue it in future?\n\nEdit: Also what type of SWE would be best for me? Web Development or Mobile app development or anything else please tell,\n[10] ML is very math heavy, so if you don't like math then that will be a hurdle. On the other hand, if you like math, you will enjoy it. ML engineering is also very interesting in that, unlike other fields of CS or SoEn, it relies a lot on experimentation.\n  [11] Just liking math isn\u2019t enough if you don\u2019t enjoy doing experiments. I have a math PhD but find ML a bit boring \u2013 mainly because I don\u2019t like iterating on experiments.\n\nThough if you\u2019re from a math background everyone assumes you love ML / data sci and know tons of stats.\n  [3] Deep learning is still a lot less math intensive than the classical techniques that it has supplanted, to be fair.\n[2] If you want to work in ML you should go for a masters at least. I\u2019d recommend you pick up some books. \n\nPaul Deitel has an Intro to Python for Computer Science and Data Science. You\u2019ll be using Python and this book will introduce you to common libraries used in both data science and machine learning. \n\nO\u2019Reilly Safari is a great publisher for textbooks. I\u2019d recommend you get a copy of \u201cHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 3rd Edition\u201c. You will learn a good bit about ML from this book. We used this and a few others in my AI class. With those two books, you should be able to figure out if you like ML and you\u2019ll have enough vocabulary to branch out into other areas of interest.\n\nI recommend you work with Jupyter Notebook, I haven\u2019t worked with JupyterLab, so I don\u2019t have an opinion on it. Jupyter is like other IDEs but it\u2019s more like a virtual notebook where you can easily write code and detailed notes on one screen. You\u2019ll be introduced to this through the first book I recommend and if you decide to take ML classes in college you will definitely use it.\n[1] [removed]\n  [1] Sorry, you do not meet the minimum account age requirement of **seven** days to post a comment. Please try again after you have spent more time on reddit without being banned. Please look at the [rules page](https://old.reddit.com/r/cscareerquestions/w/posting_rules) for more information.\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/cscareerquestions) if you have any questions or concerns.*\n  [1] [removed]\n[1] do you like statistics and math?\n[1] You will probably have to go to grad school if you want to be a true  ML engineer.\n[1] Piss easy if you want to be average. Harder if you want to be world class on the research front, but it's still not exactly quantum physics.\n[1] Some of the smartest cs grads struggle with it. If you are super mathematical go for it. If you are just doing some basic ML I think you can get away with simply importing libraries, reading docs, and running code on Jupyter notebooks.\n[1] Get a job in the data field. I would start small like data analyst, then go into data science. Go get a masters in DS or CS w/ ML track. Maybe you can be a ML engineer in 10 years, that\u2019s IF you do everything perfectly\n[1] It\u2019s surprisingly simple. I\u2019m not cs or math major but during my PhD I took a grad level neural network course out of interest. I have since been using machine learning tools every chance I get in my research. Besides, no company hiring a bachelors expects much, you will have a ton of on the job training (from what I hear).\n[1] Yes, you can, quite easily. ML isn't hard. 10 hours a week for a year, is what university's Bachelors level ML+DL curriculum is. \n\nIf you wanna start, start with auditing andrewNg (instructor) courses on coursera. They're by stanford and deeplearning . ai, i think.\n \nMake sure you know Calculus, Linear algebra, and Probability and Statistics. (Even if you don't learn on the way)\n[0] It's math all the way down, and it takes a special kind of desire to learn. I for one find it incredibly boring, but love learning about languages and compilers.\n"
    }
]